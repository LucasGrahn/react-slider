{"version":3,"sources":["styles/global.ts","components/Slider/Partials/SliderItem.tsx","components/Slider/Partials/SliderIndicator.tsx","components/Slider/Slider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createGlobalStyle","SliderItemContainer","styled","div","props","isActive","SliderImage","img","SliderLabel","AbsoluteDiv","SliderItem","imageSrc","alt","label","src","IndicatorContainer","form","SliderIndicator","input","amount","activeIndex","onChangeFn","StyledSlider","Button","button","Icon","FontAwesomeIcon","ButtonBar","Slider","items","useState","setActiveIndex","goToNextSlide","useCallback","length","goToPreviousSlide","goToSlideByIndex","index","map","item","path","onClick","icon","faChevronLeft","faChevronRight","Container","App","defaultItems","useMemo","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.316b6fde.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    body {\r\n      margin: 0;\r\n      padding: 0;\r\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n        sans-serif;\r\n      -webkit-font-smoothing: antialiased;\r\n      -moz-osx-font-smoothing: grayscale;\r\n    }\r\n`;","import React from 'react';\nimport styled from 'styled-components'\nimport { SliderItemProps as Props } from '../../../types/Slider';\n\nconst SliderItemContainer = styled.div<{ isActive : boolean }>`\n    max-width: 800px;\n    opacity: ${ props => props.isActive ? '1' : '0' };\n`;\n\nconst SliderImage = styled.img<{ src: string, alt: string, isActive: boolean }>`\n    position: relative;\n    width: 100%;\n    height: auto;\n    z-index: -1;\n    max-height: 450px;\n    border-radius: 10px;\n    transform: scale(${ props => props.isActive ? '1' : '0.95' });\n    transition: ease 0.5s;\n`;\n\nconst SliderLabel = styled.div<{ isActive : boolean }>`\n    position: absolute;\n    bottom: 10px;\n    width: 100%;\n    min-height: 30px;\n    z-index: 5;\n    color: white;\n    text-align: center;\n    opacity: ${ props => props.isActive ? '1' : '0' };\n`;\n\nconst AbsoluteDiv = styled.div`\n    position: absolute;\n    left: 0px;\n    top: 0px;\n`;\n\nconst SliderItem : React.FC<Props> = ({ isActive, imageSrc, alt, label }) => {\n    return (\n        <SliderItemContainer isActive={isActive}>\n            <AbsoluteDiv>\n                <SliderImage src={imageSrc} alt={alt} isActive={isActive} />\n                <SliderLabel isActive={isActive}>{ label }</SliderLabel>\n            </AbsoluteDiv>\n        </SliderItemContainer>\n    );\n};\n\nexport default SliderItem;\n","import React, { useCallback, FunctionComponent } from 'react';\nimport styled, { StyledFunction } from 'styled-components'\n\ninterface Props {\n    amount : number;\n    activeIndex : number;\n    onChangeFn : (index : number) => void;\n}\n\ninterface BullPointProps {\n    active : boolean;\n}\n\nconst IndicatorContainer = styled.form`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n`;\n\nconst IndicatorBullPoint = styled.input<BullPointProps>`\n    width: 2rem;\n    height: 2rem;\n    border-radius: 50%;\n    background-color: black;\n`;\n\nconst SliderIndicator : React.FC<Props> = ({ amount, activeIndex, onChangeFn }) => {\n    return (\n        <IndicatorContainer>\n            <fieldset></fieldset>\n        </IndicatorContainer>\n    );\n};\n\nexport default SliderIndicator;\n","import React, { useState, useCallback } from 'react';\nimport SliderItem from './Partials/SliderItem';\nimport SliderIndicator from './Partials/SliderIndicator';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport { SliderProps as Props } from \"../../types/Slider\";\n\nconst StyledSlider = styled.div`\n    width: 100%;\n    border-radius: 10px;\n    position: relative;\n    height: 450px;\n`;\n\nconst Button = styled.button<{ onClick :  (activeIndex : number,) => void | any}>`\n    background-color: transparent;\n    border-color: transparent;\n    color: white;\n    z-index: 10;\n    cursor: pointer;\n    height: 40px;\n    width: 40px;\n    padding: 4px;\n`;\n\nconst Icon = styled(FontAwesomeIcon)<{ icon : any  }>`\n    height: 20px;\n    width: 20px !important;\n`;\n\nconst ButtonBar = styled.div`\n    display: flex;\n    justify-content: space-between;\n    z-index: 10;\n    position: absolute;\n    bottom: 45%;\n    width: 95%;\n    padding-left: 2.5%;\n`;\n\nconst Slider : React.FC<Props> = ({ items}) => {\n    const [activeIndex, setActiveIndex] = useState<number>(0);\n    \n    const goToNextSlide = useCallback((activeIndex) => {\n        setActiveIndex((activeIndex !== items.length - 1) ? activeIndex + 1 : 0);\n    }, [activeIndex]);\n\n    const goToPreviousSlide = useCallback((activeIndex) => {\n        setActiveIndex((activeIndex === 0) ? items.length - 1 : activeIndex - 1);\n    }, [activeIndex]);\n\n    const goToSlideByIndex = useCallback((index : number) => setActiveIndex(index), []);\n\n    return (\n        <StyledSlider>\n            {\n                items.map((item, index) => <SliderItem \n                    isActive={index === activeIndex} \n                    imageSrc={item.path} \n                    alt={item.alt} \n                    label={item.label}\n                    key={index}\n                />)\n            }\n            <ButtonBar>\n                <Button onClick={() => goToPreviousSlide(activeIndex)}>\n                    <Icon icon={faChevronLeft} />\n                </Button>\n                <Button onClick={() => goToNextSlide(activeIndex)}>\n                    <Icon icon={faChevronRight} />\n                </Button>\n            </ButtonBar>\n            <SliderIndicator amount={items.length} activeIndex={activeIndex} onChangeFn={goToSlideByIndex} />\n        </StyledSlider>\n    );\n};\n\nexport default Slider;\n","import React, { useMemo } from 'react';\nimport GlobalStyle from './styles/global';\nimport Slider from './components/Slider/Slider';\nimport { SliderItem } from './types/Slider';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst App: React.FC = () => {\n  const defaultItems : Array<SliderItem> = useMemo(() => [\n    {\n      path: 'https://picsum.photos/1280/720',\n      label: 'What an amazing image!',\n      alt: 'amazing image',\n    },\n    {\n      path: 'https://picsum.photos/1920/1080',\n      label: 'I wonder what can be seen here',\n      alt: 'wonder',\n    },\n    {\n      path: 'https://picsum.photos/960/544',\n      label: 'Sadly the last picture...',\n      alt: 'last picture',\n    },\n  ], []);\n\n  return (\n    <React.Fragment>\n      <GlobalStyle/>\n      <Container>\n        <h1>React Slider Demo</h1>\n        <Slider items={defaultItems}/>\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}